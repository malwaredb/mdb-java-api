package net.malwaredb.client;

import com.fasterxml.jackson.jr.annotationsupport.JacksonAnnotationExtension;
import com.fasterxml.jackson.jr.ob.JSON;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpRequest.BodyPublishers;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.Duration;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import net.malwaredb.client.beans.GetSetAPIKey;
import net.malwaredb.client.beans.SelfInfo;
import net.malwaredb.client.beans.ServerInfo;

/**
 * Client for the MalwareDB server
 * @author rjzak
 */
public class MDBClient {

    protected String serverAddr;
    protected int serverPort;
    protected String serverProtocol = "http";
    protected String apiKey;
    protected String serverURL;
    protected boolean useTLS;
    protected Duration timeout = Duration.ofSeconds(10);
    protected HttpClient client = null;
    protected SelfInfo self = null;
    protected static final String DEFAULT_FNAME = ".malwaredb_client.json";
    protected static final JSON json;
    static {
        json = JSON.builder().register(JacksonAnnotationExtension.std).build();
    }

    public MDBClient() throws IOException {
        this(Path.of(System.getProperty("user.home"), DEFAULT_FNAME).toString());
    }

    public MDBClient(String configPath) throws IOException {
        String contents = Files.readString(Path.of(configPath));
        List<String> errorBuilder = new ArrayList<>();
        Map<String, Object> map = JSON.std.mapFrom(contents);
        if (map.containsKey("serverHost")) {
            serverAddr = (String) map.get("serverHost");
        } else {
            errorBuilder.add("No server host specified");
        }

        if (map.containsKey("serverPort")) {
            Object port = map.get("serverPort");
            if (port instanceof String) {
                serverPort = Integer.parseInt((String) port);
            } else if (port instanceof Integer) {
                serverPort = (int) port;
            } else {
                errorBuilder.add("Cannot parse serverPort");
            }
        } else {
            errorBuilder.add("No server port specified.");
        }

        if (map.containsKey("tls")) {
            Object tls = map.get("tls");
            if (tls instanceof String) {
                useTLS = ((String) tls).equalsIgnoreCase("true");
            } else if (tls instanceof Boolean) {
                useTLS = (Boolean) tls;
            }
        } else {
            useTLS = false;
        }
        
        if (useTLS)
            serverProtocol = "https";

        if (map.containsKey("apiKey")) {
            Object key = map.get("apiKey");
            apiKey = (String) map.get("apiKey");
        } else {
            errorBuilder.add("No API key present.");
        }

        if (errorBuilder.size() > 0) {
            throw new IOException(String.join(",", errorBuilder));
        }
        buildServerURL();
    }

    public MDBClient(String serverAddr, int serverPort, boolean tls, String apiKey) {
        this.serverAddr = serverAddr;
        this.serverPort = serverPort;
        this.useTLS = tls;
        this.apiKey = apiKey;
        if (this.useTLS)
            serverProtocol = "https";
        buildServerURL();
    }

    public MDBClient(String serverAddr, int serverPort, boolean tls, String username, String password) throws IOException, InterruptedException {
        this.serverAddr = serverAddr;
        this.serverPort = serverPort;
        this.useTLS = tls;
        if (this.useTLS)
            serverProtocol = "https";
        
        Map<String, Object> loginRequest = new HashMap<>();
        loginRequest.put("UserName", username);
        loginRequest.put("UserPassword", password);
        Map<String, Object> loginResponse = postURL(GetSetAPIKey.URL, loginRequest);
        if (loginResponse.containsKey("APIKey")) {
            this.apiKey = (String) loginResponse.get("APIKey");
        } else {
            if (loginResponse.containsKey("Message")) {
                throw new IOException ((String)loginResponse.get("Message"));
            } else {
                throw new IOException("Failed to log in to MalwareDB");
            }
        }
        buildServerURL();
    }
    
    public MDBAdminClient getAdminClient() {
        return new MDBAdminClient(this);
    }
    
    private void buildServerURL() {
        serverURL = new StringBuilder().append(serverProtocol).append("://").append(serverAddr).append(":").append(serverPort).toString();
        try {
            Map<String, Object> postRequest = new HashMap<>();
            postRequest.put("APIKey", apiKey);
            String response = postURLToString(SelfInfo.URL, postRequest);
            self = (SelfInfo) json.beanFrom(SelfInfo.class, response);
        } catch (IOException | InterruptedException ex){
            System.err.println(ex.toString() + " getting user info.");
        }
    }
    
    public ServerInfo getServerInfo() throws IOException, InterruptedException {
        String info = getURLToString(ServerInfo.URL);
        return (ServerInfo) json.beanFrom(ServerInfo.class, info);
    }

    public void submitFileByPath(String file) throws IOException {
        File sample = new File(file);
        byte[] fileContents = Files.readAllBytes(sample.toPath());
        submitFileBytes(fileContents);
    }

    public void submitFileInputStream(InputStream inStream) throws IOException {
        byte[] fileContents = inStream.readAllBytes();
        submitFileBytes(fileContents);
    }

    public void submitFileBytes(byte[] fileContents) {

    }

    public void fetchFile(String sha256, String destination) {

    }

    protected Map<String, Object> getURL(String url) throws IOException, InterruptedException {
        return JSON.std.mapFrom(getURLToString(url));
    }
    
    protected Map<String, Object> postURL(String url, Map<String, Object> jsonData) throws IOException, InterruptedException {
        return JSON.std.mapFrom(postURLToString(url, jsonData));
    }
    
    protected String getURLToString(String url) throws IOException, InterruptedException {
        if (client == null) {
            client = HttpClient.newBuilder().followRedirects(HttpClient.Redirect.NEVER).build();
        }
        if (!url.startsWith("/")) {
            url = "/" + url;
        }
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(serverURL + url))
                .timeout(timeout)
                .GET().build();
        HttpResponse<String> response = client.send(request, BodyHandlers.ofString());
        return response.body();
    }
    
    protected String postURLToString(String url, Map<String, Object> jsonData) throws IOException, InterruptedException {
        if (client == null) {
            client = HttpClient.newBuilder().followRedirects(HttpClient.Redirect.NEVER).build();
        }
        if (!url.startsWith("/")) {
            url = "/" + url;
        }
        
        if (!jsonData.containsKey("APIKey")) {
            jsonData.put("APIKey", apiKey);
        }
        
        String postString = JSON.std.asString(jsonData);
        
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(serverURL + url))
                .timeout(timeout)
                .header("Content-Type", "application/json")
                .POST(BodyPublishers.ofString(postString))
                .build();
        HttpResponse<String> response = client.send(request, BodyHandlers.ofString());
        return response.body();
    }

    public void save() throws IOException {
        save(Path.of(System.getProperty("user.home"), DEFAULT_FNAME).toString());
    }

    public void save(String configPath) throws IOException {
        String json = JSON.std
                .with(JSON.Feature.PRETTY_PRINT_OUTPUT)
                .composeString()
                .startObject()
                .put("serverHost", serverAddr)
                .put("serverPort", serverPort)
                .put("apiKey", apiKey)
                .put("tls", useTLS)
                .end()
                .finish();
        Files.write(Path.of(configPath), json.getBytes());
    }
    
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("MalwareDB client to ").append(serverURL);
        if (self != null) {
            sb.append(". User name: ").append(self.getUsername());
            sb.append(", account created on ").append(self.getCreated());
        }
        
        return sb.toString();
    }
}
